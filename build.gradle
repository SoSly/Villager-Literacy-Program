buildscript {
    repositories {
        maven { url = 'https://maven.parchmentmc.org' } // Adds parchment support
        maven { url = 'https://plugins.gradle.org/m2/' } // Required for CurseGradle
        maven { url = 'https://maven.neoforged.net/releases' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }

        mavenCentral()
    }
    dependencies {
        classpath group: 'net.neoforged', name: 'NeoGradle', version: '6.0.+', changing: true
        classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.4.0' //CurseForge Gradle Plugin
        classpath 'org.parchmentmc:librarian:1.+'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

apply plugin: 'net.neoforged.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: "com.matthewprenger.cursegradle"
apply plugin: 'org.spongepowered.mixin'

version = "${minecraft_version}-${api_name}-${mod_version}"
group = "${mod_group}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
base {
    archivesName = "${minecraft_version}-${api_name}-${mod_version}"
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

sourceSets {
    main {
        java {
            srcDir('src/main/java')
        }
        resources {
            srcDir('src/main/resources')
            srcDir('src/generated/resources')
        }
    }
    test {
        java {
            srcDir('src/test/java')
        }
        resources {
            srcDir('src/test/resources')
        }
    }
}

minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    //
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: "${mappings_channel}", version: "${mappings_version}"
    copyIdeResources = true

    runs {
        configureEach {
            workingDirectory project.file("run/${it.name}")
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            property 'forge.enabledGameTestNamespaces', "${mod_id}"
            arg '-mixin.config=vlp.mixins.json'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                    source sourceSets.test
                }
            }
        }

        client {
            args '--username', 'Dev'
        }

        server {
            args '--nogui'
        }

        data {
            args '--mod', "${mod_id}", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }

        gameTestServer {
            args '--nogui'
        }
    }
}

repositories {
    maven {
        url = "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    flatDir {
        dirs "libs"
    }
}

dependencies {
    minecraft "net.neoforged:forge:${minecraft_version}-${api_version}"

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    // required dependencies

    // these mods are included only for the purpose of testing
    runtimeOnly fg.deobf("curse.maven:jei-${jei_projectId}:${jei_fileId}")
    runtimeOnly fg.deobf("curse.maven:betteradvancements-${advancements_projectId}:${advancements_fileId}")
}


tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version       : minecraft_version, minecraft_version_range: minecraft_version_range,
            api_version             : api_version, api_version_range: api_version_range, api_name: api_name,
            loader_version_range    : loader_version_range,
            mod_id                  : mod_id, mod_description: mod_description, mod_name: mod_name, mod_logo: mod_logo,
            mod_license             : mod_license, mod_version: mod_version, mod_authors: mod_authors,
            mod_credits             : mod_credits
    ]
    inputs.properties replaceProperties
    filesMatching(['META-INF/mods.toml']) {
        expand replaceProperties + [project: project]
    }
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
}

mixin {
    add sourceSets.main, "vlp.refmap.json"
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'MixinConfigs': 'vlp.mixins.json',
        ])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}